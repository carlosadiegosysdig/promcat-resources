apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  selector:
    matchLabels:
      app: postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
    spec:
      containers:
        - name: postgres
          image: postgres:13
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: postgres-config
            - secretRef:
                name: postgres-secret
          volumeMounts:
            - name: postgres-init
              mountPath: /docker-entrypoint-initdb.d/create-exporter-user.sql
              subPath: create-exporter-user.sql
            - name: postgres-secret
              mountPath: /docker-entrypoint-initdb.d/modify-exporter-user-password.sql
              subPath: modify-exporter-user-password.sql
          resources:
            limits:
              memory: "256Mi"
              cpu: "256m"
      volumes:
        - configMap:
            defaultMode: 420
            name: postgres-init
          name: postgres-init
        - secret:
            defaultMode: 420
            secretName: postgres-secret
            items:
              - key: modify-exporter-user-password.sql
                path: modify-exporter-user-password.sql
          name: postgres-secret
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init
  labels:
    app: postgres
data:
  create-exporter-user.sql: |
    -- To use IF statements, hence to be able to check if the user exists before
    -- attempting creation, we need to switch to procedural SQL (PL/pgSQL)
    -- instead of standard SQL.
    -- More: https://www.postgresql.org/docs/9.3/plpgsql-overview.html
    -- To preserve compatibility with <9.0, DO blocks are not used; instead,
    -- a function is created and dropped.
    CREATE OR REPLACE FUNCTION __tmp_create_user() returns void as $$
    BEGIN
      IF NOT EXISTS (
              SELECT                       -- SELECT list can stay empty for this
              FROM   pg_catalog.pg_user
              WHERE  usename = 'postgres_exporter') THEN
        CREATE USER postgres_exporter;
      END IF;
    END;
    $$ language plpgsql;

    SELECT __tmp_create_user();
    DROP FUNCTION __tmp_create_user();

    ALTER USER postgres_exporter SET SEARCH_PATH TO postgres_exporter,pg_catalog;

    -- If deploying as non-superuser (for example in AWS RDS), uncomment the GRANT
    -- line below and replace <MASTER_USER> with your root user.
    -- GRANT postgres_exporter TO <MASTER_USER>;
    CREATE SCHEMA IF NOT EXISTS postgres_exporter;
    GRANT USAGE ON SCHEMA postgres_exporter TO postgres_exporter;
    GRANT CONNECT ON DATABASE postgres TO postgres_exporter;

    CREATE OR REPLACE FUNCTION get_pg_stat_activity() RETURNS SETOF pg_stat_activity AS
    $$ SELECT * FROM pg_catalog.pg_stat_activity; $$
    LANGUAGE sql
    VOLATILE
    SECURITY DEFINER;

    CREATE OR REPLACE VIEW postgres_exporter.pg_stat_activity
    AS
      SELECT * from get_pg_stat_activity();

    GRANT SELECT ON postgres_exporter.pg_stat_activity TO postgres_exporter;

    CREATE OR REPLACE FUNCTION get_pg_stat_replication() RETURNS SETOF pg_stat_replication AS
    $$ SELECT * FROM pg_catalog.pg_stat_replication; $$
    LANGUAGE sql
    VOLATILE
    SECURITY DEFINER;

    CREATE OR REPLACE VIEW postgres_exporter.pg_stat_replication
    AS
      SELECT * FROM get_pg_stat_replication();

    GRANT SELECT ON postgres_exporter.pg_stat_replication TO postgres_exporter;
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  labels:
    app: postgres
data:
  POSTGRES_DB: postgresdb
  POSTGRES_USER: postgresadmin
  POSTGRES_EXPORTER_USER: postgres_exporter
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
data:
  # Add in POSTGRES_PASSWORD the result of:
  # echo YOUR-PASSWORD | base64 -> admin123  
  # EXPORTER-PASSWORD: password
  POSTGRES_PASSWORD: YWRtaW4xMjMK
  POSTGRES_EXPORTER_PASSWORD: cGFzc3dvcmQK
  # echo "ALTER USER postgres_exporter WITH PASSWORD 'password';" | base64
  modify-exporter-user-password.sql: |
    QUxURVIgVVNFUiBwb3N0Z3Jlc19leHBvcnRlciBXSVRIIFBBU1NXT1JEICdwYXNzd29yZCc7Cg==
  